  /// <summary>
    /// Расширение разметки для событий и команд
    /// </summary>
    [MarkupExtensionReturnType(typeof(RoutedEventHandler))]
    public class EventHandlerExtension : MarkupExtension
    {
       Type _eventArgsType;

        /// <summary>
        /// Путь к команде
        /// </summary>
        public string BindingCommandPath { get; set; }

        /// <summary>
        /// Команда
        /// </summary>
        public ICommand Command { get; set; }

        public EventHandlerExtension() { }

        public EventHandlerExtension(string bindingCommandPath)
        {
            BindingCommandPath = bindingCommandPath;
        }

        public override object ProvideValue(IServiceProvider sp)
        {
            var pvt = sp.GetService(typeof(IProvideValueTarget)) as IProvideValueTarget;
            if (pvt != null)
            {
                var evt = pvt.TargetProperty as EventInfo;
                var doAction = GetType().GetMethod("DoAction", BindingFlags.NonPublic | BindingFlags.Instance);
                Type dlgType = null;
                if (evt != null)
                {
                    dlgType = evt.EventHandlerType;
                }
                var mi = pvt.TargetProperty as MethodInfo;
                if (mi != null)
                {
                    dlgType = mi.GetParameters()[1].ParameterType;
                }
                if (dlgType != null)
                {
                    _eventArgsType = dlgType.GetMethod("Invoke").GetParameters()[1].ParameterType;
                    return Delegate.CreateDelegate(dlgType, this, doAction);
                }
            }
            return null;
        }

        /// <summary>
        /// Метод привязывающийся к событию
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void DoAction(object sender, RoutedEventArgs e)
        {
            object obj = null;
            var vm = (sender as FrameworkElement).DataContext;
            if (BindingCommandPath != null)
            {
                var props = BindingCommandPath.Split('.');
                foreach (var prop in props)
                {
                    var property = vm.GetType().GetProperty(prop);
                    if (property != null)
                        vm = property.GetValue(vm, null);
                    else
                    {
                        MethodInfo method = vm.GetType().GetMethod(prop, BindingFlags.Public | BindingFlags.Instance);
                        if (method == null) throw new NotImplementedException("Класс расширения для событий может использоваться только с командами или методами");
                        method.Invoke(vm, new[] { sender, e });
                        return;
                    }
                }
                Command = vm as ICommand;
            }

            Type eventArgsType = typeof(EventCommandArgs<>).MakeGenericType(_eventArgsType);
            var cmdParams = Activator.CreateInstance(eventArgsType, sender, e);
            if (Command != null && Command.CanExecute(cmdParams))
                Command.Execute(cmdParams);

        }

     
    }
